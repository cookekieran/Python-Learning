# ----------------------------------------
# Basic Functions
# ----------------------------------------

def directions_to_timesSq():
    print("Walk 4 mins to 34th St Herald Square train station")
    print("Take the Northbound N, Q, R, or W train 1 stop")
    print("Get off the Times Square 42nd Street stop")

directions_to_timesSq()

print("Checking the weather for you!")

def weather_check():
    print("Looks great outside! Enjoy your trip.")

print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")
weather_check()

def trip_welcome(destination):
    print("Welcome to Tripcademy!")
    print("Looks like you're going to " + destination + " today.")

trip_welcome("Times Square")

def generate_trip_instructions(location):
    print("Looks like you are planning a trip to visit " + location)
    print("You can use the public subway system to get to " + location)

generate_trip_instructions("Grand Central Station")

# ----------------------------------------
# Trip Expense Calculator
# ----------------------------------------

def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
    car_rental_total = car_rental_rate * trip_time
    hotel_total = hotel_rate * trip_time - 10
    trip_total = sum([car_rental_total, hotel_total, plane_ticket_price])
    return trip_total

print(calculate_expenses(200, 100, 100, 5))

def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
    print("Here is what your trip will look like!")
    print("First, we will stop in " + first_destination + ", then " + second_destination + ", and lastly " + final_destination)
    print("")

trip_planner(first_destination="Iceland", final_destination="Germany", second_destination="India")
trip_planner("Brooklyn", "Queens")

# ----------------------------------------
# Price Utilities
# ----------------------------------------

tshirt_price = 9.75
shorts_price = 15.50
mug_price = 5.99
poster_price = 2.00

max_price = max(tshirt_price, shorts_price, mug_price, poster_price)
print(f"{max_price:.1f}")

min_price = min(tshirt_price, shorts_price, mug_price, poster_price)
print(f"\n{min_price:.2f}")

rounded_price = round(tshirt_price, 1)
print(f"\n{rounded_price}")

# ----------------------------------------
# Location Functions
# ----------------------------------------

favorite_locations = "Paris, Norway, Iceland"

def print_count_locations():
    print("There are 3 locations")

def show_favorite_locations():
    print("Your favorite locations are: " + favorite_locations)

print_count_locations()
show_favorite_locations()

# ----------------------------------------
# Budget Functions
# ----------------------------------------

current_budget = 3500.75

def print_remaining_budget(budget):
    print("Your remaining budget is: $" + str(budget))

print_remaining_budget(current_budget)

def deduct_expense(budget, expense):
    return budget - expense

shirt_expense = 9
new_budget_after_shirt = deduct_expense(current_budget, shirt_expense)
print_remaining_budget(new_budget_after_shirt)

# ----------------------------------------
# Tourist Locations
# ----------------------------------------

def top_tourist_locations_italy():
    first = "Rome"
    second = "Venice"
    third = "Florence"
    return first, second, third

print(top_tourist_locations_italy())

most_popular1, most_popular2, most_popular3 = top_tourist_locations_italy()
print(most_popular1)
print(most_popular2)
print(most_popular3)

# ----------------------------------------
# Trip Planner v1.0
# ----------------------------------------

def trip_planner_welcome(name):
    print("Welcome to tripplanner v1.0 " + name)

trip_planner_welcome("Kieran")

def estimated_time_rounded(estimated_time):
    return round(estimated_time)

estimate = estimated_time_rounded(2.43)

def destination_setup(origin, destination, estimated_time, mode_of_transport="Car"):
    print("Your trip starts off in " + origin)
    print("And you are traveling to " + destination)
    print("You will be traveling by " + mode_of_transport)
    print("It will take approximately " + str(estimated_time) + " hours")

destination_setup("St Albans", "London", 2.43)

# ----------------------------------------
# Lambda Functions and Functional Programming
# ----------------------------------------

square = lambda x: x ** 2
print(square(4))

add = lambda a, b: a + b
print(add(3, 5))

greeting = lambda name: f"Hello, {name}!"
print(greeting("Alice"))

numbers = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x ** 2, numbers))
print(squared)

even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 11)))
print(even_numbers)

students = [('Alice', 'A', 15), ('Bob', 'B', 12), ('Charlie', 'A', 20)]
sorted_students = sorted(students, key=lambda x: x[2])
print(sorted_students)

def double(x):
    return x * 2

doubled_numbers = list(map(double, numbers))
print(doubled_numbers)

names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve']
name_lengths = list(map(lambda x: len(x), names))

def capitalize_name(name):
    return name.upper()

capitalized_names = list(map(capitalize_name, names))

print("Original names:", names)
print("Name lengths:", name_lengths)
print("Capitalized names:", capitalized_names)

# ----------------------------------------
# Functions Project: Physics Calculations
# ----------------------------------------

train_mass = 22680
train_acceleration = 10
train_distance = 100
bomb_mass = 1

def f_to_c(f_temp):
    c_temp = ((f_temp - 32) * 5/9)
    return f"{c_temp:.2f}"

f100_in_celsius = f_to_c(100)
print(f100_in_celsius)

def c_to_f(c_temp):
    f_temp = c_temp * (9/5) + 32
    return f"{f_temp:.2f}"

c0_in_fahrenheit = c_to_f(0)
print(c0_in_fahrenheit)

def get_force(mass, acceleration):
    force = mass * acceleration
    return round(force, -3)

train_force = get_force(train_mass, train_acceleration)
print(f"The GE train supplies {train_force}N of force")

def get_energy(mass, c=3*10**8):
    energy = mass * c**2
    return round(energy, -3)

bomb_energy = get_energy(bomb_mass)
print(f"A 1kg bomb supplies {bomb_energy}J of energy")

def get_work(mass, acceleration, distance):
    work = get_force(mass, acceleration) * distance
    return work

train_work = get_work(train_mass, train_acceleration, train_distance)
print(f"The GE train does {train_work} Joules of work over Y meters")
