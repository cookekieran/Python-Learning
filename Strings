Strings
#1
favorite_word = ("Arsenal")
print(favorite_word)

#2
my_name = "kieran"
first_initial = my_name[0]
print (first_initial)

#3
first_name = "Rodrigo"
last_name = "Villanueva"
new_account = last_name[0:5]

# When slicing, the start number is inclusive and the end number is exclusive. Meaning if you want five charcters you write 0:5, but the 5th value is not included in the print out. Also, the default start is at 0, so it can be written as [:5] instead

temp_password = last_name[2:6]

#4
first_name = "Julie"
last_name = "Blevins"

def account_generator(first_name, last_name):
  new_account = first_name[:3] + last_name[:3]
  return new_account

new_account = account_generator(first_name, last_name)

print (new_account)



#5
first_name = "Reiko"
last_name = "Matsuki"

def password_generator(first_name, last_name):
  password = first_name[-3::1] + last_name[-3::1]
  return password

temp_password = password_generator(first_name, last_name)

print(temp_password)

#6
company_motto = "Copeland's Corporate Company helps you capably cope with the constant cacophony of daily life"

second_to_last = company_motto[-2]

final_word = company_motto[-4::1]

print(final_word)

#7
first_name = "Bob"
last_name = "Daily"

fixed_first_name = "R" + first_name[1::1]

print(fixed_first_name) # output: Rob

#8
password = "theycallme\"crazy\"91"

print(password) 
# backslash (\) is used to override escape charcters


#9
def get_length(word):  
  counter = 0
  for length in word:
    counter += 1
    print(counter) # returns 1,2,3,4
  return (counter) # returns 4
print(get_length("test"))

#10
def letter_check(word, letter):
  for word_broken in word:
    print(word_broken)
    if word_broken == letter:
      return True
  else:
    return False

print(letter_check("strawberry", "a"))

# This checks all the letters and returns true when the letter is found. but stops at that point. to check the whole word the code can be written like this:

def letter_check(word, letter):
    found = False
    for char in word:
        print(char)
        if char == letter:
            found = True
    return found

print(letter_check("strawberry", "r"))





#11
def contains(big_string, little_string):
  if little_string in big_string:
    return True
  else:
    return False

print(contains("watermmelon","melon"))
  
def common_letters(string_one, string_two):
  new_list = []
  for i, letter in enumerate(string_one):
    #print(f"Letter {letter} is in position {i}")
    if letter in string_two and letter not in new_list:
      new_list.append(letter)
  return new_list

print(common_letters("manhattan","Tamberine"))

#12
def username_generator(first_name, last_name):
  user_name = first_name[:3:1] + last_name[:4:1]
  return user_name

first_name = "Kieran"
last_name = "Cooke"

user_name = username_generator(first_name, last_name)
print(user_name)

def password_generator(user_name):
    password = user_name[-1] + user_name[:-1]
    return password

password = password_generator(user_name)
print(password)


#13
def username_generator(first_name, last_name):
  user_name = first_name[:3:1] + last_name[:4:1]
  return user_name

first_name = "Kieran"
last_name = "Cooke"

user_name = username_generator(first_name, last_name)
print(user_name)

def password_generator(user_name):
    password = user_name[-1] + user_name[:-1]
    return password

#Alternative method:
def password_generator(user_name):
    password = ""
    for i in range(0, len(user_name)):
        password += user_name[i-1]
    return password

String methods:
#2
poem_title = "spring storm"
poem_author = "William Carlos Williams"

poem_title_fixed = poem_title.title()

print(poem_title)
print(poem_title_fixed)

poem_author_fixed = poem_author.upper()

print(poem_author)
print(poem_author_fixed)


#3
line_one = "The sky has given over"

line_one_words = line_one.split()

print(line_one_words)

#4
authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"

author_names = authors.split(",")

print(author_names)

def get_last_names(author_names):
    return [name.split()[-1] for name in author_names]

author_last_names = get_last_names(author_names)

print(author_last_names)

# ALterantive Method
author_last_names = []
for name in author_names:
  author_last_names.append(name.split()[-1])







#5
spring_storm_text = \
"""The sky has given over 
its bitterness. 
Out of the dark change 
all day long 
rain falls and falls 
as if it would never end. 
Still the snow keeps 
its hold on the ground. 
But water, water 
from a thousand runnels! 
It collects swiftly, 
dappled with black 
cuts a way for itself 
through green ice in the gutters. 
Drop after drop it falls 
from the withered grass-stems 
of the overhanging embankment."""

spring_storm_lines = spring_storm_text.split('\n')

print(spring_storm_lines)

#6
reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]

reapers_line_one_no_space = ("".join(reapers_line_one_words))

reapers_line_one = (" ".join(reapers_line_one_words))

print(reapers_line_one_no_space)
print(reapers_line_one)



#7
winter_trees_lines = ['All the complicated details', 'of the attiring and', 'the disattiring are completed!', 'A liquid moon', 'moves gently among', 'the long branches.', 'Thus having prepared their buds', 'against a sure winter', 'the wise trees', 'stand sleeping in the cold.']

winter_trees_full = "\n".join(winter_trees_lines)
print(winter_trees_full)

smooth_fifth_verse_lines = ['Well I\'m from the barrio', 'You hear my rhythm on your radio', 'You feel the turning of the world so soft and slow', 'Turning you \'round and \'round']

smooth_fifth_verse = '\n'.join(smooth_fifth_verse_lines)

print("----")

print(smooth_fifth_verse)

#8
love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']

love_maybe_lines_stripped = [line.strip() for line in love_maybe_lines]

print(love_maybe_lines_stripped)

print("----")

love_maybe_full = "\n".join(love_maybe_lines_stripped)

print(love_maybe_full)




#9
toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in washington, D.C. in 1894. Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, north Carolina. Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""

toomer_bio_fixed = toomer_bio.replace("Tomer", "Toomer")

print(toomer_bio_fixed)
	
#10
god_wills_it_line_one = "The very earth will disown you"

disown_placement = god_wills_it_line_one.find("disown")

print(disown_placement) # output = 20 (first charcter is zero)

#11
def poem_title_card(title, poet):
  return "The poem \"{}\" is written by {}.".format(title,poet)

print(poem_title_card("I Hear America Singing", "Walt Whitman"))

# output: The poem "I Hear America Singing" is written by Walt Whitman.








#12
def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date = publishing_date, author = author, title = title, original_work = original_work)
  return poem_desc

author = "Shel Silverstein"
title = "My Beard"
original_work = "Where the Sidewalk Ends"
publishing_date = "1974"

my_beard_description = (poem_description(publishing_date, author, title, original_work))

print(my_beard_description)

String Methods Summary
•	.upper() — Converts all characters in a string to uppercase.
•	.lower() — Converts all characters in a string to lowercase.
•	.title() — Capitalizes the first letter of each word in a string.
•	.split() — Splits a string into a list of substrings.
•	.join() — Joins a list of strings into a single string.
•	.strip() — Removes whitespace (or specified characters) from the beginning and end of a string.
•	.replace(old, new) — Replaces all occurrences of a substring with another.
•	.find(sub) — Returns the index of the first occurrence of a substring. Returns -1 if not found.
•	.format() — Inserts variables into a string using placeholders.
•	.extend() - Adds each element from an iterable (like a list) to the end of the original list, extending it.






#13
highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"

highlighted_poems_list = highlighted_poems.split(",")

#print(highlighted_poems_list)

poet_name = []
for name in highlighted_poems_list:
  poet_name.append(name.split(":")[-2])

#print(poet_name)

poem_name = []
for name in highlighted_poems_list:
  poem_name.append(name.split(":")[0].strip())

#print(poem_name)

publication_year = []
for year in highlighted_poems_list:
  publication_year.append(year.split(":")[-1])

#print(publication_year)

final_answer = list(zip(poem_name, poet_name, publication_year))

#print(final_answer)

def loop(data):
  for item1, item2, item3 in final_answer:
    print("The poem {} was published by {} in {}.".format(item1, item2, item3))

loop(final_answer)

-----------------------------------------------------

#Model solution below:

highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"

# print(highlighted_poems)

highlighted_poems_list = highlighted_poems.split(',')

# print(highlighted_poems_list)

highlighted_poems_stripped = []

for poem in highlighted_poems_list:
  highlighted_poems_stripped.append(poem.strip())
  
# print(highlighted_poems_stripped)

highlighted_poems_details = []

for poem in highlighted_poems_stripped:
  highlighted_poems_details.append(poem.split(':'))
  
titles = []
poets = []
dates = []

for poem in highlighted_poems_details:
  titles.append(poem[0])
  poets.append(poem[1])
  dates.append(poem[2])
  
for i in range(0,len(highlighted_poems_details)):
    print('The poem {} was published by {} in {}'.format(titles[i], poets[i], dates[i]))

#14:
daily_sales = \
"""Edith Mcbride   ;,;$1.21   ;,;   white ;,; 
09/15/17   ,Herbert Tran   ;,;   $7.29;,; 
white&blue;,;   09/15/17 ,Paul Clarke ;,;$12.52 
;,;   white&blue ;,; 09/15/17 ,Lucille Caldwell   
;,;   $5.13   ;,; white   ;,; 09/15/17,
Eduardo George   ;,;$20.39;,; white&yellow 
;,;09/15/17   ,   Danny Mclaughlin;,;$30.82;,;   
purple ;,;09/15/17 ,Stacy Vargas;,; $1.85   ;,; 
purple&yellow ;,;09/15/17,   Shaun Brock;,; 
$17.98;,;purple&yellow ;,; 09/15/17 , 
Erick Harper ;,;$17.41;,; blue ;,; 09/15/17, 
Michelle Howell ;,;$28.59;,; blue;,;   09/15/17   , 
Carroll Boyd;,; $14.51;,;   purple&blue   ;,;   
09/15/17   , Teresa Carter   ;,; $19.64 ;,; 
white;,;09/15/17   ,   Jacob Kennedy ;,; $11.40   
;,; white&red   ;,; 09/15/17, Craig Chambers;,; 
$8.79 ;,; white&blue&red   ;,;09/15/17   , Peggy Bell;,; $8.65 ;,;blue   ;,; 09/15/17,   Kenneth Cunningham ;,;   $10.53;,;   green&blue   ;,; 
09/15/17   ,   Marvin Morgan;,;   $16.49;,; 
green&blue&red   ;,;   09/15/17 ,Marjorie Russell 
;,; $6.55 ;,;   green&blue&red;,;   09/15/17 ,
Israel Cummings;,;   $11.86   ;,;black;,;  
09/15/17,   June Doyle   ;,;   $22.29 ;,;  
black&yellow ;,;09/15/17 , Jaime Buchanan   ;,;   
$8.35;,;   white&black&yellow   ;,;   09/15/17,   
Rhonda Farmer;,;$2.91 ;,;   white&black&yellow   
;,;09/15/17, Darren Mckenzie ;,;$22.94;,;green 
;,;09/15/17,Rufus Malone;,;$4.70   ;,; green&yellow 
;,; 09/15/17   ,Hubert Miles;,;   $3.59   
;,;green&yellow&blue;,;   09/15/17   , Joseph Bridges  ;,;$5.66   ;,; green&yellow&purple&blue 
;,;   09/15/17 , Sergio Murphy   ;,;$17.51   ;,;   
black   ;,;   09/15/17 , Audrey Ferguson ;,; 
$5.54;,;black&blue   ;,;09/15/17 ,Edna Williams ;,; 
$17.13;,; black&blue;,;   09/15/17,   Randy Fleming;,;   $21.13 ;,;black ;,;09/15/17 ,Elisa Hart;,; $0.35   ;,; black&purple;,;   09/15/17   ,
Ernesto Hunt ;,; $13.91   ;,;   black&purple ;,;   
09/15/17,   Shannon Chavez   ;,;$19.26   ;,; 
yellow;,; 09/15/17   , Sammy Cain;,; $5.45;,;   
yellow&red ;,;09/15/17 ,   Steven Reeves ;,;$5.50   
;,;   yellow;,;   09/15/17, Ruben Jones   ;,; 
$14.56 ;,;   yellow&blue;,;09/15/17 , Essie Hansen;,;   $7.33   ;,;   yellow&blue&red
;,; 09/15/17   ,   Rene Hardy   ;,; $20.22   ;,; 
black ;,;   09/15/17 ,   Lucy Snyder   ;,; $8.67   
;,;black&red  ;,; 09/15/17 ,Dallas Obrien ;,;   
$8.31;,;   black&red ;,;   09/15/17,   Stacey Payne 
;,;   $15.70   ;,;   white&black&red ;,;09/15/17   
,   Tanya Cox   ;,;   $6.74   ;,;yellow   ;,; 
09/15/17 , Melody Moran ;,;   $30.84   
;,;yellow&black;,;   09/15/17 , Louise Becker   ;,; 
$12.31 ;,; green&yellow&black;,;   09/15/17 ,
Ryan Webster;,;$2.94 ;,; yellow ;,; 09/15/17 
,Justin Blake ;,; $22.46   ;,;white&yellow ;,;   
09/15/17,   Beverly Baldwin ;,;   $6.60;,;   
white&yellow&black ;,;09/15/17   ,   Dale Brady   
;,;   $6.27 ;,; yellow   ;,;09/15/17 ,Guadalupe Potter ;,;$21.12   ;,; yellow;,; 09/15/17   , 
Desiree Butler ;,;$2.10   ;,;white;,; 09/15/17  
,Sonja Barnett ;,; $14.22 ;,;white&black;,;   
09/15/17, Angelica Garza;,;$11.60;,;white&black   
;,;   09/15/17   ,   Jamie Welch   ;,; $25.27   ;,; 
white&black&red ;,;09/15/17   ,   Rex Hudson   
;,;$8.26;,;   purple;,; 09/15/17 ,   Nadine Gibbs 
;,;   $30.80 ;,;   purple&yellow   ;,; 09/15/17   , 
Hannah Pratt;,;   $22.61   ;,;   purple&yellow   
;,;09/15/17,Gayle Richards;,;$22.19 ;,; 
green&purple&yellow ;,;09/15/17   ,Stanley Holland 
;,; $7.47   ;,; red ;,; 09/15/17 , Anna Dean;,;$5.49 ;,; yellow&red ;,;   09/15/17   ,
Terrance Saunders ;,;   $23.70  ;,;green&yellow&red 
;,; 09/15/17 ,   Brandi Zimmerman ;,; $26.66 ;,; 
red   ;,;09/15/17 ,Guadalupe Freeman ;,; $25.95;,; 
green&red ;,;   09/15/17   ,Irving Patterson 
;,;$19.55 ;,; green&white&red ;,;   09/15/17 ,Karl Ross;,;   $15.68;,;   white ;,;   09/15/17 , Brandy Cortez ;,;$23.57;,;   white&red   ;,;09/15/17, 
Mamie Riley   ;,;$29.32;,; purple;,;09/15/17 ,Mike Thornton   ;,; $26.44 ;,;   purple   ;,; 09/15/17, 
Jamie Vaughn   ;,; $17.24;,;green ;,; 09/15/17   , 
Noah Day ;,;   $8.49   ;,;green   ;,;09/15/17   
,Josephine Keller ;,;$13.10 ;,;green;,;   09/15/17 ,   Tracey Wolfe;,;$20.39 ;,; red   ;,; 09/15/17 ,
Ignacio Parks;,;$14.70   ;,; white&red ;,;09/15/17 
, Beatrice Newman ;,;$22.45   ;,;white&purple&red 
;,;   09/15/17, Andre Norris   ;,;   $28.46   ;,;   
red;,;   09/15/17 ,   Albert Lewis ;,; $23.89;,;   
black&red;,; 09/15/17,   Javier Bailey   ;,;   
$24.49   ;,; black&red ;,; 09/15/17   , Everett Lyons ;,;$1.81;,;   black&red ;,; 09/15/17 ,   
Abraham Maxwell;,; $6.81   ;,;green;,;   09/15/17   
,   Traci Craig ;,;$0.65;,; green&yellow;,; 
09/15/17 , Jeffrey Jenkins   ;,;$26.45;,; 
green&yellow&blue   ;,;   09/15/17,   Merle Wilson 
;,;   $7.69 ;,; purple;,; 09/15/17,Janis Franklin   
;,;$8.74   ;,; purple&black   ;,;09/15/17 ,  
Leonard Guerrero ;,;   $1.86   ;,;yellow  
;,;09/15/17,Lana Sanchez;,;$14.75   ;,; yellow;,;   
09/15/17   ,Donna Ball ;,; $28.10  ;,; 
yellow&blue;,;   09/15/17   , Terrell Barber   ;,; 
$9.91   ;,; green ;,;09/15/17   ,Jody Flores;,; 
$16.34 ;,; green ;,;   09/15/17,   Daryl Herrera 
;,;$27.57;,; white;,;   09/15/17   , Miguel Mcguire;,;$5.25;,; white&blue   ;,;   09/15/17 ,   
Rogelio Gonzalez;,; $9.51;,;   white&black&blue   
;,;   09/15/17   ,   Lora Hammond ;,;$20.56 ;,; 
green;,;   09/15/17,Owen Ward;,; $21.64   ;,;   
green&yellow;,;09/15/17,Malcolm Morales ;,;   
$24.99   ;,;   green&yellow&black;,; 09/15/17 ,   
Eric Mcdaniel ;,;$29.70;,; green ;,; 09/15/17 
,Madeline Estrada;,;   $15.52;,;green;,;   09/15/17 
, Leticia Manning;,;$15.70 ;,; green&purple;,; 
09/15/17 ,   Mario Wallace ;,; $12.36 ;,;green ;,; 
09/15/17,Lewis Glover;,;   $13.66   ;,;   
green&white;,;09/15/17,   Gail Phelps   ;,;$30.52   
;,; green&white&blue   ;,; 09/15/17 , Myrtle Morris 
;,;   $22.66   ;,; green&white&blue;,;09/15/17"""

#------------------------------------------------
# Start coding below!

daily_sales_replaced = daily_sales.replace(";,;", ";;;")

daily_transactions = daily_sales_replaced.split(",")

#print(daily_transactions)

components = []
for data in daily_transactions:
  components.append(data.split(";;;"))

# print(components)

polished_data = []
for data in components:
  cleaned = [item.strip() for item in data]
  polished_data.append(cleaned)

#print(polished_data)

customers = []
sales = []
thread_sold = []

for data in polished_data:
  customers.append(data[0])
  sales.append(data[1])
  thread_sold.append(data[2])

# print(customers)
# print(sales)
# print(thread_sold)

collected_data = list(zip(customers, sales, thread_sold))

#print(collected_data)

#print(sales)

total_sales = 0

new_list = []
for value in sales:
  calculation = value.replace("$", "")
  new_list.append(float(calculation))

total_sales = sum(new_list)

#print(f"${total_sales}")

#print(thread_sold)

thread_sold_split01 = []
for each_item in thread_sold:
  if each_item.find("&") == -1:
    thread_sold_split01.append(each_item)
  else:
    each_item2 = each_item.split("&")
    thread_sold_split01.extend(each_item2)

#Extend adds each component of the list individually instead of adding lists within lists

#print(thread_sold_split01)

def colour_count(colour_to_count):
  counter = 0
  for colour in thread_sold_split01:
    if colour == colour_to_count:
      counter += 1
  return counter

colours = ['red', 'yellow', 'green', 'white', 'black', 'blue', 'purple']

for colour in colours:
    print(f"{colour}: {colour_count(colour)}")


